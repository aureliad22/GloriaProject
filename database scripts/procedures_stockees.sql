/****** Object:  StoredProcedure [dbo].[RESEARCH_CANDIDATE]    Script Date: 04/08/2017 10:20:46 ******/
CREATE PROCEDURE [dbo].[AUTHENTICATE_TEACHER]


@login nvarchar(200),
@password nvarchar(200)

AS


BEGIN

    SELECT * from formateurs

where
	login = @login AND
	password = @password
	
	
	
END;


-- =============================================
-- Author:		Aurélia Delauné
-- Create date: 01/08/2017
-- Description:	Stored procedure that returns the candidate's info 
-- whose login (or email) and password match the given parameters
-- =============================================

CREATE PROCEDURE AUTHENTICATE_CANDIDATE 
	@login nvarchar(250),
	@password nvarchar(100)
	
AS
BEGIN
	SELECT 
		id, 
		nom, 
		prenom, 
		email, 
		login, 
		password,
		idPromotion
	FROM
		stagiaires
	WHERE
		(email = @login AND password = @password)
		OR
		(login = @login AND password = @password)
	RETURN
END

-- =============================================
-- Author:      Aurélia Delauné
-- Create date: 01/08/2017
-- Description: Stored procedure that inserts a new candidate 
-- with the given informations 
-- and returns the autogenerated id
-- =============================================
CREATE PROCEDURE ADD_CANDIDATE

@nom nvarchar(200),
@prenom nvarchar(200),
@email nvarchar(250),
@login nvarchar(100),
@password nvarchar(100),
@idPromotion int
AS
BEGIN

    insert into stagiaires(nom, prenom, email, login, password, idPromotion) 
    values (
    @nom,
    @prenom,
    @email,
    @login,
    @password,
    @idPromotion)

    return SCOPE_IDENTITY()
END;

-- =============================================
-- Author:      GloriaProject
-- Create date: 01/08/2017
-- Description: Stored procedure that updates the candidate
-- with the given id.
-- =============================================
CREATE PROCEDURE MODIFY_CANDIDATE

@id int,
@nom nvarchar(200),
@prenom nvarchar(200),
@email nvarchar(250),
@login nvarchar(100),
@password nvarchar(100),
@idPromotion int

AS
BEGIN
    UPDATE stagiaires
    SET nom = @nom,
        prenom = @prenom,
        email =@email,
        login=@login,
        password=@password,
        idPromotion = @idPromotion    
    WHERE id = @id
    
END;

-- =============================================
-- Author:      GloriaProject
-- Create date: 01/08/2017
-- Description: Stocked procedure that deletes the candidate
-- with the given id.
-- =============================================
CREATE PROCEDURE DELETE_CANDIDATE
@id int

AS
BEGIN
    delete from stagiaires 
    where id = @id
END;

-- =============================================
-- Author:      GloriaProject
-- Create date: 01/08/2017
-- Description: Stocked procedure that return the candidate
-- with the given id.
-- =============================================
CREATE PROCEDURE RESEARCH_CANDIDATE

@nom nvarchar(200),
@prenom nvarchar(200),
@email nvarchar(250)

AS
BEGIN

    SELECT * 
    from stagiaires
    where
        nom = @nom OR
        prenom = @prenom OR
        email = @email
       
END;

-- =============================================
-- Author:      GloriaProject
-- Create date: 01/08/2017
-- Description: Stocked procedure that return all the candidates
-- =============================================
CREATE PROCEDURE LIST_CANDIDATES
AS
BEGIN
    SELECT * 
    from stagiaires 
END;

-- =============================================
-- Author:      GloriaProject
-- Create date: 02/08/2017
-- Description: Stored procedure that return the candidate
-- with the given id.
-- =============================================
CREATE PROCEDURE FIND_BY_ID_CANDIDATE
    @id int
AS
BEGIN    
    SELECT 
        id, 
        nom, 
        prenom, 
        email, 
        login, 
        password,
        idPromotion
    FROM 
        stagiaires
    WHERE 
        id = @id
END

-- =============================================
-- Author:		GloriaProject
-- Create date: 02/08/2017
-- Description:	Stored procedure that inserts a new promotion
-- with the given title and returns the autogenerated id.
-- =============================================
CREATE PROCEDURE ADD_PROMOTION 
	@libelle nvarchar(200)
AS
BEGIN
	INSERT INTO promotions(libelle)
	VALUES(@libelle)

	RETURN SCOPE_IDENTITY()
END

-- =============================================
-- Author:		GloriaProject
-- Create date: 02/08/2017
-- Description:	Stored procedure that updates the promotion
-- with the given id.
-- =============================================
CREATE PROCEDURE MODIFY_PROMOTION
	@id int,
	@libelle nvarchar(200)
AS
BEGIN
	UPDATE 
		promotions
	SET
		libelle = @libelle
	WHERE 
		id = @id
END

-- =============================================
-- Author:		GloriaProject
-- Create date: 02/08/2017
-- Description:	Stored procedure that deletes the promotion
-- with the given id.
-- =============================================
CREATE PROCEDURE DELETE_PROMOTION
	@id int
AS
BEGIN
	DELETE FROM promotions
	WHERE id=@id

END

-- =============================================
-- Author:		GloriaProject
-- Create date: 02/08/2017
-- Description:	Stored procedure that return the promotion
-- with the given id.
-- =============================================
CREATE PROCEDURE FIND_BY_ID_PROMOTION 
	@id int
AS
BEGIN
	
	SELECT 
		id, libelle
	FROM 
		promotions
	WHERE 
		id = @id
END

-- =============================================
-- Author:		GloriaProject
-- Create date: 02/08/2017
-- Description:	Stored procedure that return all the promotions
-- =============================================
CREATE PROCEDURE LIST_PROMOTIONS
	
AS
BEGIN
	SELECT
		*
	FROM
		promotions

END

-- =============================================
-- Author:		GloriaProject
-- Create date: 01/08/2017
-- Description:	Stored procedure that inserts a new question 
-- with the given parameters into the database
-- and returns the autogenerated id.
-- =============================================
CREATE PROCEDURE ADD_QUESTION
	@enonce nvarchar(2000),
	@imageUri nvarchar(500),
	@poids nvarchar(500)
AS
BEGIN

	INSERT INTO questions (enonce,imageUri,poids)
    VALUES (@enonce, @imageUri,@poids)

	return SCOPE_IDENTITY()

END;

-- =============================================
-- Author:		GloriaProject
-- Create date: 01/08/2017
-- Description:	Stored procedure that updates the question 
-- whose id corresponds to the given id. 
-- =============================================
CREATE PROCEDURE MODIFY_QUESTION
	@id int,
	@enonce nvarchar(2000),
	@imageUri nvarchar(500),
	@poids nvarchar(500)
AS
BEGIN

	UPDATE questions 
	SET 
		enonce = @enonce,
		imageUri = @imageUri,
		poids = @poids
	WHERE 
		id = @id

END;

-- =============================================
-- Author:		GloriaProject
-- Create date: 01/08/2017
-- Description:	Stored procedure that deletes the question 
-- with the given id.
-- =============================================
CREATE PROCEDURE DELETE_QUESTION
	@id int
AS
BEGIN

	DELETE FROM questions
	WHERE id = @id

END;

-- =============================================
-- Author:		GloriaProject
-- Create date: 02/08/2017
-- Description:	Stored procedure that return the candidate
-- with the given id.
-- =============================================
CREATE PROCEDURE FIND_BY_ID_CANDIDATE
	@id int
AS
BEGIN
	
	SELECT 
		id, 
		nom, 
		prenom, 
		email, 
		login,
		password,
		idPromotion
	FROM 
		stagiaires
	WHERE 
		id = @id
END

-- =============================================
-- Author:		GloriaProject
-- Create date: 02/08/2017
-- Description:	Stored procedure that return the question
-- with the given id.
-- =============================================
CREATE PROCEDURE FIND_BY_ID_QUESTION 
	@id int
AS
BEGIN
	
	SELECT 
		id, enonce, imageUri, poids
	FROM 
		questions
	WHERE 
		id = @id
END

-- =============================================
-- Author:      GloriaProject
-- Create date: 04/08/2017
-- Description: Stored procedure that returns the list of the tests
-- for the candidate whose id is given as parameter
-- =============================================
CREATE PROCEDURE LIST_TESTS_CANDIDATE
    @idStagiaire INT
AS
BEGIN
    SELECT
        *
    FROM
        tests
    WHERE
        id IN (
            SELECT
                idTest
            FROM
                inscriptions
            WHERE
                idStagiaire = @idStagiaire)
END

-- =============================================
-- Author:      GloriaProject
-- Create date: 04/08/2017
-- Description: Stored procedure that returns the list 
-- of sections of the given test
-- =============================================
CREATE PROCEDURE LIST_SECTIONS_TEST 
    @idTest INT
AS
BEGIN
    SELECT
        ts.numSection,
        s.id,
        s.libelle,
        ts.nbQuestions
    FROM
        tests_sections ts
        LEFT JOIN sections s ON ts.idSection = s.id
    
    WHERE
        s.id IN(
            SELECT
                idSection
            FROM
                tests_sections
            WHERE
                ts.idTest =@idTest)
    ORDER BY
        ts.numSection
END

-- =============================================
-- Author:      GloriaProject
-- Create date: 04/08/2017
-- Description: Stored procedure that returns the list of questions
-- for the given section, test and candidate.
-- =============================================
CREATE PROCEDURE LIST_QUESTIONS_BY_CANDIDATEandTESTandSECTION 
    @idStagiaire INT,
    @idTest INT,
    @idSection INT
AS
BEGIN
    SELECT
        *
    FROM
        questions
    WHERE 
        id IN(
            SELECT
                idQuestion
            FROM
                questions_selectionnees
            WHERE
                idStagiaire = @idStagiaire
                AND
                idTest = @idTest
                AND
                idSection = @idSection)
END

-- =============================================
-- Author:      GloriaProject
-- Create date: 04/08/2017
-- Description: Stored procedure that returns the list of answers
-- for the given question.
-- =============================================
CREATE PROCEDURE LIST_ANSWERS_QUESTION 
    @idQuestion INT
AS
BEGIN
    SELECT
        idQuestion,
        id,
        enonce,
        estBonne
    FROM
        reponses
    WHERE
        idQuestion = @idQuestion
END

-- =============================================
-- Author:      GloriaProject
-- Create date: 07/08/2017
-- Description: Stored procedure that deletes all the given answers
-- for the specific question
-- =============================================
CREATE PROCEDURE DELETE_GIVEN_ANSWERS 
    @idStagiaire int,
    @idTest int,
    @idSection int,
    @idQuestion int

AS
BEGIN
    DELETE FROM 
        reponses_donnees
    WHERE 
        idStagiaire = @idStagiaire
    AND 
        idTest = @idTest
    AND 
        idSection = @idSection
    AND 
        idQuestion = @idQuestion

END